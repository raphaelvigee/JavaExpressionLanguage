// ====================================
// == DO NOT EDIT THIS FILE MANUALLY ==
// ====================================
package com.raphaelvigee.el;

import java.lang.Byte;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Number;
import java.lang.Short;

public class NumberUtils {
    public static Number add(Number left, Number right) {
        if (left instanceof Double || right instanceof Double) {
            return left.doubleValue() + right.doubleValue();
        } else if (left instanceof Float || right instanceof Float) {
            return left.floatValue() + right.floatValue();
        } else if (left instanceof Long || right instanceof Long) {
            return left.longValue() + right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() + right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() + right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() + right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }

    public static Number subtract(Number left, Number right) {
        if (left instanceof Double || right instanceof Double) {
            return left.doubleValue() - right.doubleValue();
        } else if (left instanceof Float || right instanceof Float) {
            return left.floatValue() - right.floatValue();
        } else if (left instanceof Long || right instanceof Long) {
            return left.longValue() - right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() - right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() - right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() - right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }

    public static Number multiply(Number left, Number right) {
        if (left instanceof Double || right instanceof Double) {
            return left.doubleValue() * right.doubleValue();
        } else if (left instanceof Float || right instanceof Float) {
            return left.floatValue() * right.floatValue();
        } else if (left instanceof Long || right instanceof Long) {
            return left.longValue() * right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() * right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() * right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() * right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }

    public static Number divide(Number left, Number right) {
        if (left instanceof Double || right instanceof Double) {
            return left.doubleValue() / right.doubleValue();
        } else if (left instanceof Float || right instanceof Float) {
            return left.floatValue() / right.floatValue();
        } else if (left instanceof Long || right instanceof Long) {
            return left.longValue() / right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() / right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() / right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() / right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }

    public static Number modulo(Number left, Number right) {
        if (left instanceof Double || right instanceof Double) {
            return left.doubleValue() % right.doubleValue();
        } else if (left instanceof Float || right instanceof Float) {
            return left.floatValue() % right.floatValue();
        } else if (left instanceof Long || right instanceof Long) {
            return left.longValue() % right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() % right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() % right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() % right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }

    public static Number and(Number left, Number right) {
        if (left instanceof Long || right instanceof Long) {
            return left.longValue() & right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() & right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() & right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() & right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }

    public static Number or(Number left, Number right) {
        if (left instanceof Long || right instanceof Long) {
            return left.longValue() | right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() | right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() | right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() | right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }

    public static Number xor(Number left, Number right) {
        if (left instanceof Long || right instanceof Long) {
            return left.longValue() ^ right.longValue();
        } else if (left instanceof Integer || right instanceof Integer) {
            return left.intValue() ^ right.intValue();
        } else if (left instanceof Short || right instanceof Short) {
            return left.shortValue() ^ right.shortValue();
        } else if (left instanceof Byte || right instanceof Byte) {
            return left.byteValue() ^ right.byteValue();
        }
        throw new RuntimeException(String.format("Unhandled types: %s, %s", left, right));
    }
}
